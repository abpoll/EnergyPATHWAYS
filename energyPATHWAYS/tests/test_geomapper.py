import unittest as ut
import energyPATHWAYS as ep
import os
from energyPATHWAYS.geomapper import GeoMapper
from collections import OrderedDict
import ipdb


class GeoMapperTest(ut.TestCase):
    @classmethod
    def setUpClass(cls):
        d = os.path.dirname(os.path.realpath(__file__))
        cfgfile_path = os.path.join(d, 'test_config.INI')
        custom_pint_definitions_path = os.path.join(d, 'unit_defs.txt')
        ep.config.initialize_config(cfgfile_path, custom_pint_definitions_path)

    def test_geography_loading(self):
        geo = GeoMapper()

        geographies = OrderedDict([('electricity interconnection', [1, 2, 3]), ('state', [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55]), ('census division', [56, 57, 58, 59, 60, 61, 62, 63, 64]), ('us', [65]), ('census region', [66, 67, 68, 69]), ('gas producing regions', [71, 72, 73, 74, 75, 76, 77]), ('time zones', [167, 424, 425, 426, 427, 428, 429, 430]), ('nerc region', [500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518])])

        self.assertEqual(geo.geographies, geographies)

        timezone_names = {1: 'Africa/Abidjan', 2: 'Africa/Accra', 3: 'Africa/Addis_Ababa', 4: 'Africa/Algiers', 5: 'Africa/Asmara', 6: 'Africa/Bamako', 7: 'Africa/Bangui', 8: 'Africa/Banjul', 9: 'Africa/Bissau', 10: 'Africa/Blantyre', 11: 'Africa/Brazzaville', 12: 'Africa/Bujumbura', 13: 'Africa/Cairo', 14: 'Africa/Casablanca', 15: 'Africa/Ceuta', 16: 'Africa/Conakry', 17: 'Africa/Dakar', 18: 'Africa/Dar_es_Salaam', 19: 'Africa/Djibouti', 20: 'Africa/Douala', 21: 'Africa/El_Aaiun', 22: 'Africa/Freetown', 23: 'Africa/Gaborone', 24: 'Africa/Harare', 25: 'Africa/Johannesburg', 26: 'Africa/Juba', 27: 'Africa/Kampala', 28: 'Africa/Khartoum', 29: 'Africa/Kigali', 30: 'Africa/Kinshasa', 31: 'Africa/Lagos', 32: 'Africa/Libreville', 33: 'Africa/Lome', 34: 'Africa/Luanda', 35: 'Africa/Lubumbashi', 36: 'Africa/Lusaka', 37: 'Africa/Malabo', 38: 'Africa/Maputo', 39: 'Africa/Maseru', 40: 'Africa/Mbabane', 41: 'Africa/Mogadishu', 42: 'Africa/Monrovia', 43: 'Africa/Nairobi', 44: 'Africa/Ndjamena', 45: 'Africa/Niamey', 46: 'Africa/Nouakchott', 47: 'Africa/Ouagadougou', 48: 'Africa/Porto-Novo', 49: 'Africa/Sao_Tome', 50: 'Africa/Tripoli', 51: 'Africa/Tunis', 52: 'Africa/Windhoek', 53: 'America/Adak', 54: 'America/Anchorage', 55: 'America/Anguilla', 56: 'America/Antigua', 57: 'America/Araguaina', 58: 'America/Argentina/Buenos_Aires', 59: 'America/Argentina/Catamarca', 60: 'America/Argentina/Cordoba', 61: 'America/Argentina/Jujuy', 62: 'America/Argentina/La_Rioja', 63: 'America/Argentina/Mendoza', 64: 'America/Argentina/Rio_Gallegos', 65: 'America/Argentina/Salta', 66: 'America/Argentina/San_Juan', 67: 'America/Argentina/San_Luis', 68: 'America/Argentina/Tucuman', 69: 'America/Argentina/Ushuaia', 70: 'America/Aruba', 71: 'America/Asuncion', 72: 'America/Atikokan', 73: 'America/Bahia', 74: 'America/Bahia_Banderas', 75: 'America/Barbados', 76: 'America/Belem', 77: 'America/Belize', 78: 'America/Blanc-Sablon', 79: 'America/Boa_Vista', 80: 'America/Bogota', 81: 'America/Boise', 82: 'America/Cambridge_Bay', 83: 'America/Campo_Grande', 84: 'America/Cancun', 85: 'America/Caracas', 86: 'America/Cayenne', 87: 'America/Cayman', 88: 'America/Chicago', 89: 'America/Chihuahua', 90: 'America/Costa_Rica', 91: 'America/Creston', 92: 'America/Cuiaba', 93: 'America/Curacao', 94: 'America/Danmarkshavn', 95: 'America/Dawson', 96: 'America/Dawson_Creek', 97: 'America/Denver', 98: 'America/Detroit', 99: 'America/Dominica', 100: 'America/Edmonton', 101: 'America/Eirunepe', 102: 'America/El_Salvador', 103: 'America/Fortaleza', 104: 'America/Glace_Bay', 105: 'America/Godthab', 106: 'America/Goose_Bay', 107: 'America/Grand_Turk', 108: 'America/Grenada', 109: 'America/Guadeloupe', 110: 'America/Guatemala', 111: 'America/Guayaquil', 112: 'America/Guyana', 113: 'America/Halifax', 114: 'America/Havana', 115: 'America/Hermosillo', 116: 'America/Indiana/Indianapolis', 117: 'America/Indiana/Knox', 118: 'America/Indiana/Marengo', 119: 'America/Indiana/Petersburg', 120: 'America/Indiana/Tell_City', 121: 'America/Indiana/Vevay', 122: 'America/Indiana/Vincennes', 123: 'America/Indiana/Winamac', 124: 'America/Inuvik', 125: 'America/Iqaluit', 126: 'America/Jamaica', 127: 'America/Juneau', 128: 'America/Kentucky/Louisville', 129: 'America/Kentucky/Monticello', 130: 'America/Kralendijk', 131: 'America/La_Paz', 132: 'America/Lima', 133: 'America/Los_Angeles', 134: 'America/Lower_Princes', 135: 'America/Maceio', 136: 'America/Managua', 137: 'America/Manaus', 138: 'America/Marigot', 139: 'America/Martinique', 140: 'America/Matamoros', 141: 'America/Mazatlan', 142: 'America/Menominee', 143: 'America/Merida', 144: 'America/Metlakatla', 145: 'America/Mexico_City', 146: 'America/Miquelon', 147: 'America/Moncton', 148: 'America/Monterrey', 149: 'America/Montevideo', 150: 'America/Montserrat', 151: 'America/Nassau', 152: 'America/New_York', 153: 'America/Nipigon', 154: 'America/Nome', 155: 'America/Noronha', 156: 'America/North_Dakota/Beulah', 157: 'America/North_Dakota/Center', 158: 'America/North_Dakota/New_Salem', 159: 'America/Ojinaga', 160: 'America/Panama', 161: 'America/Pangnirtung', 162: 'America/Paramaribo', 163: 'America/Phoenix', 164: 'America/Port-au-Prince', 165: 'America/Port_of_Spain', 166: 'America/Porto_Velho', 167: 'America/Puerto_Rico', 168: 'America/Rainy_River', 169: 'America/Rankin_Inlet', 170: 'America/Recife', 171: 'America/Regina', 172: 'America/Resolute', 173: 'America/Rio_Branco', 174: 'America/Santa_Isabel', 175: 'America/Santarem', 176: 'America/Santiago', 177: 'America/Santo_Domingo', 178: 'America/Sao_Paulo', 179: 'America/Scoresbysund', 180: 'America/Sitka', 181: 'America/St_Barthelemy', 182: 'America/St_Johns', 183: 'America/St_Kitts', 184: 'America/St_Lucia', 185: 'America/St_Thomas', 186: 'America/St_Vincent', 187: 'America/Swift_Current', 188: 'America/Tegucigalpa', 189: 'America/Thule', 190: 'America/Thunder_Bay', 191: 'America/Tijuana', 192: 'America/Toronto', 193: 'America/Tortola', 194: 'America/Vancouver', 195: 'America/Whitehorse', 196: 'America/Winnipeg', 197: 'America/Yakutat', 198: 'America/Yellowknife', 199: 'Antarctica/Casey', 200: 'Antarctica/Davis', 201: 'Antarctica/DumontDUrville', 202: 'Antarctica/Macquarie', 203: 'Antarctica/Mawson', 204: 'Antarctica/McMurdo', 205: 'Antarctica/Palmer', 206: 'Antarctica/Rothera', 207: 'Antarctica/Syowa', 208: 'Antarctica/Troll', 209: 'Antarctica/Vostok', 210: 'Arctic/Longyearbyen', 211: 'Asia/Aden', 212: 'Asia/Almaty', 213: 'Asia/Amman', 214: 'Asia/Anadyr', 215: 'Asia/Aqtau', 216: 'Asia/Aqtobe', 217: 'Asia/Ashgabat', 218: 'Asia/Baghdad', 219: 'Asia/Bahrain', 220: 'Asia/Baku', 221: 'Asia/Bangkok', 222: 'Asia/Beirut', 223: 'Asia/Bishkek', 224: 'Asia/Brunei', 225: 'Asia/Chita', 226: 'Asia/Choibalsan', 227: 'Asia/Colombo', 228: 'Asia/Damascus', 229: 'Asia/Dhaka', 230: 'Asia/Dili', 231: 'Asia/Dubai', 232: 'Asia/Dushanbe', 233: 'Asia/Gaza', 234: 'Asia/Hebron', 235: 'Asia/Ho_Chi_Minh', 236: 'Asia/Hong_Kong', 237: 'Asia/Hovd', 238: 'Asia/Irkutsk', 239: 'Asia/Jakarta', 240: 'Asia/Jayapura', 241: 'Asia/Jerusalem', 242: 'Asia/Kabul', 243: 'Asia/Kamchatka', 244: 'Asia/Karachi', 245: 'Asia/Kathmandu', 246: 'Asia/Khandyga', 247: 'Asia/Kolkata', 248: 'Asia/Krasnoyarsk', 249: 'Asia/Kuala_Lumpur', 250: 'Asia/Kuching', 251: 'Asia/Kuwait', 252: 'Asia/Macau', 253: 'Asia/Magadan', 254: 'Asia/Makassar', 255: 'Asia/Manila', 256: 'Asia/Muscat', 257: 'Asia/Nicosia', 258: 'Asia/Novokuznetsk', 259: 'Asia/Novosibirsk', 260: 'Asia/Omsk', 261: 'Asia/Oral', 262: 'Asia/Phnom_Penh', 263: 'Asia/Pontianak', 264: 'Asia/Pyongyang', 265: 'Asia/Qatar', 266: 'Asia/Qyzylorda', 267: 'Asia/Rangoon', 268: 'Asia/Riyadh', 269: 'Asia/Sakhalin', 270: 'Asia/Samarkand', 271: 'Asia/Seoul', 272: 'Asia/Shanghai', 273: 'Asia/Singapore', 274: 'Asia/Srednekolymsk', 275: 'Asia/Taipei', 276: 'Asia/Tashkent', 277: 'Asia/Tbilisi', 278: 'Asia/Tehran', 279: 'Asia/Thimphu', 280: 'Asia/Tokyo', 281: 'Asia/Ulaanbaatar', 282: 'Asia/Urumqi', 283: 'Asia/Ust-Nera', 284: 'Asia/Vientiane', 285: 'Asia/Vladivostok', 286: 'Asia/Yakutsk', 287: 'Asia/Yekaterinburg', 288: 'Asia/Yerevan', 289: 'Atlantic/Azores', 290: 'Atlantic/Bermuda', 291: 'Atlantic/Canary', 292: 'Atlantic/Cape_Verde', 293: 'Atlantic/Faroe', 294: 'Atlantic/Madeira', 295: 'Atlantic/Reykjavik', 296: 'Atlantic/South_Georgia', 297: 'Atlantic/St_Helena', 298: 'Atlantic/Stanley', 299: 'Australia/Adelaide', 300: 'Australia/Brisbane', 301: 'Australia/Broken_Hill', 302: 'Australia/Currie', 303: 'Australia/Darwin', 304: 'Australia/Eucla', 305: 'Australia/Hobart', 306: 'Australia/Lindeman', 307: 'Australia/Lord_Howe', 308: 'Australia/Melbourne', 309: 'Australia/Perth', 310: 'Australia/Sydney', 311: 'Canada/Atlantic', 312: 'Canada/Central', 313: 'Canada/Eastern', 314: 'Canada/Mountain', 315: 'Canada/Newfoundland', 316: 'Canada/Pacific', 317: 'Europe/Amsterdam', 318: 'Europe/Andorra', 319: 'Europe/Athens', 320: 'Europe/Belgrade', 321: 'Europe/Berlin', 322: 'Europe/Bratislava', 323: 'Europe/Brussels', 324: 'Europe/Bucharest', 325: 'Europe/Budapest', 326: 'Europe/Busingen', 327: 'Europe/Chisinau', 328: 'Europe/Copenhagen', 329: 'Europe/Dublin', 330: 'Europe/Gibraltar', 331: 'Europe/Guernsey', 332: 'Europe/Helsinki', 333: 'Europe/Isle_of_Man', 334: 'Europe/Istanbul', 335: 'Europe/Jersey', 336: 'Europe/Kaliningrad', 337: 'Europe/Kiev', 338: 'Europe/Lisbon', 339: 'Europe/Ljubljana', 340: 'Europe/London', 341: 'Europe/Luxembourg', 342: 'Europe/Madrid', 343: 'Europe/Malta', 344: 'Europe/Mariehamn', 345: 'Europe/Minsk', 346: 'Europe/Monaco', 347: 'Europe/Moscow', 348: 'Europe/Oslo', 349: 'Europe/Paris', 350: 'Europe/Podgorica', 351: 'Europe/Prague', 352: 'Europe/Riga', 353: 'Europe/Rome', 354: 'Europe/Samara', 355: 'Europe/San_Marino', 356: 'Europe/Sarajevo', 357: 'Europe/Simferopol', 358: 'Europe/Skopje', 359: 'Europe/Sofia', 360: 'Europe/Stockholm', 361: 'Europe/Tallinn', 362: 'Europe/Tirane', 363: 'Europe/Uzhgorod', 364: 'Europe/Vaduz', 365: 'Europe/Vatican', 366: 'Europe/Vienna', 367: 'Europe/Vilnius', 368: 'Europe/Volgograd', 369: 'Europe/Warsaw', 370: 'Europe/Zagreb', 371: 'Europe/Zaporozhye', 372: 'Europe/Zurich', 373: 'GMT', 374: 'Indian/Antananarivo', 375: 'Indian/Chagos', 376: 'Indian/Christmas', 377: 'Indian/Cocos', 378: 'Indian/Comoro', 379: 'Indian/Kerguelen', 380: 'Indian/Mahe', 381: 'Indian/Maldives', 382: 'Indian/Mauritius', 383: 'Indian/Mayotte', 384: 'Indian/Reunion', 385: 'Pacific/Apia', 386: 'Pacific/Auckland', 387: 'Pacific/Bougainville', 388: 'Pacific/Chatham', 389: 'Pacific/Chuuk', 390: 'Pacific/Easter', 391: 'Pacific/Efate', 392: 'Pacific/Enderbury', 393: 'Pacific/Fakaofo', 394: 'Pacific/Fiji', 395: 'Pacific/Funafuti', 396: 'Pacific/Galapagos', 397: 'Pacific/Gambier', 398: 'Pacific/Guadalcanal', 399: 'Pacific/Guam', 400: 'Pacific/Honolulu', 401: 'Pacific/Johnston', 402: 'Pacific/Kiritimati', 403: 'Pacific/Kosrae', 404: 'Pacific/Kwajalein', 405: 'Pacific/Majuro', 406: 'Pacific/Marquesas', 407: 'Pacific/Midway', 408: 'Pacific/Nauru', 409: 'Pacific/Niue', 410: 'Pacific/Norfolk', 411: 'Pacific/Noumea', 412: 'Pacific/Pago_Pago', 413: 'Pacific/Palau', 414: 'Pacific/Pitcairn', 415: 'Pacific/Pohnpei', 416: 'Pacific/Port_Moresby', 417: 'Pacific/Rarotonga', 418: 'Pacific/Saipan', 419: 'Pacific/Tahiti', 420: 'Pacific/Tarawa', 421: 'Pacific/Tongatapu', 422: 'Pacific/Wake', 423: 'Pacific/Wallis', 424: 'US/Alaska', 425: 'US/Arizona', 426: 'US/Central', 427: 'US/Eastern', 428: 'US/Hawaii', 429: 'US/Mountain', 430: 'US/Pacific', 431: 'UTC'}

        self.assertEqual(geo.timezone_names, timezone_names)

        self.assertEqual(geo.map_keys, ['households', 'area'])

        index_names = [u'electricity interconnection', u'state', u'census division', u'us', u'census region', u'gas producing regions', u'time zones', u'nerc region']

        self.assertEqual(geo.values.index.names, index_names)

        self.assertTrue((geo.values.columns.values == ['households', 'area']).all())

        self.assertAlmostEqual(geo.values['households'].sum(), 118097209.0)

        self.assertAlmostEqual(geo.values['area'].sum(), 9156442.0)

        self.assertEqual(len(geo.values), 61)

        #ipdb.set_trace()

